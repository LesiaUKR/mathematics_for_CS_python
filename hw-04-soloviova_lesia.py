# -*- coding: utf-8 -*-
"""goit-numericalpy-hw-04-soloviova_lesia.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ptw97YPRM9q6t7ZD8t_lIhQFWtWbLPeK
"""

# Імпортуємо необхідні бібліотеки
import numpy as np
import pandas as pd
from sklearn.datasets import load_breast_cancer
from sklearn.preprocessing import StandardScaler
from scipy.spatial.distance import pdist, squareform
import seaborn as sns
import matplotlib.pyplot as plt

# Крок 1: Завантаження набору даних про рак молочної залози
print("Крок 1 n: Завантаження даних")
data = load_breast_cancer()
print("Дані успішно завантажені. Ось перші 5 рядків:")

# Крок 2: Перетворення даних у DataFrame (вже зроблено вище)
print("Крок 2: Перетворення даних у DataFrame")
df = pd.DataFrame(data=data.data, columns=data.feature_names)

print(df.head())

# Крок 3: Виведення інформації про дані
print("Крок 3: Інформація про набір даних")
info = df.info()

# Крок 4: Описова статистика
print("Крок 4: Описова статистика")
stats = df.describe()
print("Описова статистика даних:")
print(stats)

# Крок 5: Стандартизація даних
print("Крок 5: Стандартизація даних")
scaler = StandardScaler()
standardized_data = scaler.fit_transform(df)
df_standardized = pd.DataFrame(standardized_data, columns=df.columns)
print("Дані стандартизовані. Ось перші 5 рядків стандартизованого DataFrame:")
print(df_standardized.head())

# Крок 6: Візуалізація парних діаграм
print("Крок 6: Візуалізація парних діаграм для перших 5 колонок")
sns.pairplot(df_standardized.iloc[:, :5])  # Обмежено першими 5 колонками для простоти
plt.show()

# Крок 7: Розрахунок матриць відстаней для різних метрик
print("Крок 7: Розрахунок матриць відстаней")
metrics = ['cityblock', 'cosine', 'euclidean', 'chebyshev']
distance_matrices = {}

for metric in metrics:
    print(f"Розрахунок матриці відстаней для метрики: {metric}")
    dist_matrix = squareform(pdist(df_standardized, metric=metric))
    distance_matrices[metric] = dist_matrix
    print(f"Матриця відстаней для метрики {metric} обчислена")

# Крок 8: Візуалізація матриць відстаней
print("Крок 8: Візуалізація матриць відстаней")
for metric, matrix in distance_matrices.items():
    print(f"Візуалізація матриці відстаней для метрики: {metric}")
    plt.figure(figsize=(10, 8))
    sns.heatmap(matrix, cmap='coolwarm', cbar=True)
    plt.title(f'Матриця відстаней - {metric}')
    plt.show()

# Крок 9: Висновки
print("Крок 9: Висновки")
conclusions = """
На основі аналізу:
1. Евклідова та Манхеттенська (Cityblock) відстані забезпечують інтуїтивно зрозумілі результати для безперервних наборів даних, таких як цей.
2. Косинусна метрика підкреслює кутові залежності, що корисно для аналізу напрямків.
3. Відстань Чебишева (максимальна відстань у будь-якому вимірі) ефективно виділяє викиди, але може бути менш інтуїтивною.

Для кластеризації або подальшого аналізу вибір відповідної метрики залежить від конкретної задачі та характеристик набору даних.
"""
print(conclusions)